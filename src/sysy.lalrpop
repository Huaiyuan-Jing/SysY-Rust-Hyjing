use crate::ast::{CompUnit, FuncDef, Block, FuncType, Stmt, Expr, UnaryOp, AddOp, MulOp, RelOp, EqOp, LogicOp };
grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},  // comment for one line like //....
    r"/\*.*\*/" => {},  // comment for multi line like /*....*/ (actually not true here because it uses greedy match)
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Expr> ";" => Stmt { <> };

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Expr: Expr = <exp: LOrExp> => <>;

UnaryExp: Expr = {
    <e: PrimaryExp> => e,
    <op: UnaryOp> <expr: UnaryExp> => Expr::UnaryExpr(op, Box::new(expr)),
};

PrimaryExp: Expr = {
    "(" <e:Expr> ")" => e,
    <n:Number> => Expr::Number(n)
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

AddExp: Expr = {
    <mulexpr: MulExp> => <>,
    <addexpr: AddExp> <addop: AddOp> <mulexpr: MulExp> => Expr::AddExpr(Box::new(addexpr), addop, Box::new(mulexpr)),
};

AddOp: AddOp = {
    "+" => AddOp::Plus,
    "-" => AddOp::Minus,
};

MulExp: Expr = {
    <unaryexpr: UnaryExp> => <>,
    <mulexpr: MulExp> <mulop: MulOp> <unaryexpr: UnaryExp> => Expr::MulExpr(Box::new(mulexpr), mulop, Box::new(unaryexpr)),
};

MulOp: MulOp = {
    "*" => MulOp::Multiply,
    "/" => MulOp::Divide,
    "%" => MulOp::Modulo,
}

LOrExp: Expr = {
    <l_and_exp: LAndExp> => <>,
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => Expr::LogicExpr(Box::new(l_or_exp), LogicOp::Or, Box::new(l_and_exp)),
}

LAndExp: Expr = {
    <eq_exp: EqExp> => <>,
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => Expr::LogicExpr(Box::new(l_and_exp), LogicOp::And, Box::new(eq_exp)),
}

EqExp: Expr = {
    <rel_exp: RelExp> => <>,
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => Expr::EqExpr(Box::new(eq_exp), EqOp::Eq, Box::new(rel_exp)),
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => Expr::EqExpr(Box::new(eq_exp), EqOp::Neq, Box::new(rel_exp)), 
}

RelExp: Expr = {
    <add_exp: AddExp> => <>,
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => Expr::RelExpr(Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

RelOp: RelOp = {
    "<" => RelOp::Less,
    "<=" => RelOp::LessOrEqual,
    ">" => RelOp::Greater,
    ">=" => RelOp::GreaterOrEqual,
}