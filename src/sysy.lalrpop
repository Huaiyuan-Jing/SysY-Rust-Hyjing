use crate::ast::*;
grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},  // comment for one line like //....
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {}, // comment for multi line like /*....*/
    _
}

pub CompUnit: CompUnit = <list:Repeat<CompItem>> => CompUnit{ <> };

CompItem: CompItem = {
    <f: FuncDef> => CompItem::FuncDef(f),
    <cs: ConstDecl> => CompItem::ConstDecl(cs),
    <vs: VarDecl> => CompItem::VarDecl(vs),
};

FuncDef: FuncDef = {
    <head: FuncDefHead> ")" <block: Block> => FuncDef {func_type: head.0, ident: head.1, block: block, params: Vec::new()},
    <head: FuncDefHead> <init: FuncFParam> <mut params: ("," <FuncFParam>)*> ")" <block: Block> => {
        params.insert(0, init);
        FuncDef { func_type: head.0, ident: head.1, block: block, params: params }
    },
};

FuncDefHead: (FuncType, String) = {
    "void" <ident: Ident> "(" => (FuncType::Void, <>),
    "int" <ident: Ident> "(" => (FuncType::Int, <>),
};

FuncFParam: FuncParam = "int" <ident: Ident> => FuncParam{ kind: "i32".to_string(), ident: ident };

Block: Block = "{" <items: Repeat<BlockItem>> "}" => {
    Block { items: items }
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Repeat<T>: Vec<T> = {
    <mut v:(<T>)*> => v
};

Opt<T>: Option<T> = {
    <e:T> => Some(e),
    => None,
}

BlockItem: BlockItem = {
    <s: Stmt> => BlockItem::Stmt(s),
    <c: ConstDecl> => BlockItem::ConstDecl(c),
    <v: VarDecl> => BlockItem::VarDecl(v),
};

ConstDecl: Vec<ConstDef> = "const" "int" <mut l: Comma<ConstDef>> ";" => {
    for i in 0..l.len() {
        l[i].kind = "i32".to_string();
    }
    l
};

ConstDef: ConstDef = <id: Ident> "=" <val: ConstInitVal> => ConstDef { kind: String::new(), id: id, value: val };

ConstInitVal: Expr = <e: ConstExp> => <>;

ConstExp: Expr = <e: Expr> => <>;

VarDecl: Vec<VarDef> = "int" <init: VarDef> <mut l: (", " <VarDef>)*> ";" => {
    l.insert(0, init);
    for i in 0..l.len() {
        l[i].kind = String::from("i32");
    }
    l
};

VarDef: VarDef = {
    <id: LVal> => VarDef { kind: String::new(), id: id, value: None },
    <id: LVal> "=" <value: InitVal> => VarDef {kind: String::new(), id: id, value: Some(value) },
};

InitVal: Expr = <e: Expr> => <>;

LVal: String = <id: Ident> => <>;

Stmt: Stmt = {
    <MatchedStmt> => <>,
    <OpenStmt> => <>,
};

MatchedStmt: Stmt = {
    <id: LVal> "=" <e: Expr> ";" => Stmt::Assign(id, e),
    <e: Opt<Expr>> ";" => Stmt::Expr(e),
    <block: Block> => Stmt::Block(Box::new(block)),
    "if" "(" <condition: Expr> ")" <if_then: MatchedStmt> "else" <else_then: MatchedStmt> => Stmt::IfElse(condition, Box::new(if_then), Some(Box::new(else_then))),
    "return" <e: Opt<Expr>> ";" => Stmt::Ret(e),
    "while" "(" <cond: Expr> ")" <body: MatchedStmt> => Stmt::While(cond, Box::new(body)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,   
}

OpenStmt: Stmt = {
    "if" "(" <condition: Expr> ")" <if_then: Stmt> => Stmt::IfElse(condition, Box::new(if_then), None),
    "if" "(" <condition: Expr> ")" <if_then: MatchedStmt> "else" <el: OpenStmt> => Stmt::IfElse(condition, Box::new(if_then), Some(Box::new(el))),
    "while" "(" <cond: Expr> ")" <body: OpenStmt> => Stmt::While(cond, Box::new(body)),
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Expr: Expr = <exp: LOrExp> => <>;

UnaryExp: Expr = {
    <e: PrimaryExp> => e,
    <op: UnaryOp> <expr: UnaryExp> => Expr::UnaryExpr(op, Box::new(expr)),
    <ident: Ident> "(" <args: Comma<Expr>> ")" => Expr::Func(ident, args),
};

PrimaryExp: Expr = {
    "(" <e:Expr> ")" => e,
    <n:Number> => Expr::Number(n),
    <ident: Ident> => Expr::LVal(ident),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

AddExp: Expr = {
    <mulexpr: MulExp> => <>,
    <addexpr: AddExp> <addop: AddOp> <mulexpr: MulExp> => Expr::BinaryExpr(Box::new(addexpr), addop, Box::new(mulexpr)),
};

AddOp: BinaryOp = {
    "+" => BinaryOp::Plus,
    "-" => BinaryOp::Minus,
};

MulExp: Expr = {
    <unaryexpr: UnaryExp> => <>,
    <mulexpr: MulExp> <mulop: MulOp> <unaryexpr: UnaryExp> => Expr::BinaryExpr(Box::new(mulexpr), mulop, Box::new(unaryexpr)),
};

MulOp: BinaryOp = {
    "*" => BinaryOp::Multiply,
    "/" => BinaryOp::Divide,
    "%" => BinaryOp::Modulo,
}

LOrExp: Expr = {
    <l_and_exp: LAndExp> => <>,
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => Expr::BinaryExpr(Box::new(l_or_exp), BinaryOp::Or, Box::new(l_and_exp)),
}

LAndExp: Expr = {
    <eq_exp: EqExp> => <>,
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => Expr::BinaryExpr(Box::new(l_and_exp), BinaryOp::And, Box::new(eq_exp)),
}

EqExp: Expr = {
    <rel_exp: RelExp> => <>,
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => Expr::BinaryExpr(Box::new(eq_exp), BinaryOp::Eq, Box::new(rel_exp)),
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => Expr::BinaryExpr(Box::new(eq_exp), BinaryOp::Neq, Box::new(rel_exp)), 
}

RelExp: Expr = {
    <add_exp: AddExp> => <>,
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => Expr::BinaryExpr(Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

RelOp: BinaryOp = {
    "<" => BinaryOp::Less,
    "<=" => BinaryOp::LessOrEqual,
    ">" => BinaryOp::Greater,
    ">=" => BinaryOp::GreaterOrEqual,
}
