use crate::ast::{CompUnit, FuncDef, Block, FuncType, Stmt, Expr, UnaryOp, AddOp, MulOp };
grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},  // comment for one line like //....
    r"/\*.*\*/" => {},  // comment for multi line like /*....*/ (actually not true here because it uses greedy match)
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Expr> ";" => Stmt { <> };

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Expr: Expr = <exp: AddExp> => <>;

UnaryExp: Expr = {
    <e: PrimaryExp> => e,
    <op: UnaryOp> <expr: UnaryExp> => Expr::UnaryExpr(op, Box::new(expr)),
};

PrimaryExp: Expr = {
    "(" <e:Expr> ")" => e,
    <n:Number> => Expr::Number(n)
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

AddExp: Expr = {
    <mulexpr: MulExp> => <>,
    <addexpr: AddExp> <addop: AddOp> <mulexpr: MulExp> => Expr::AddExpr(Box::new(addexpr), addop, Box::new(mulexpr)),
};

AddOp: AddOp = {
    "+" => AddOp::Plus,
    "-" => AddOp::Minus,
};

MulExp: Expr = {
    <unaryexpr: UnaryExp> => <>,
    <mulexpr: MulExp> <mulop: MulOp> <unaryexpr: UnaryExp> => Expr::MulExpr(Box::new(mulexpr), mulop, Box::new(unaryexpr)),
};

MulOp: MulOp = {
    "*" => MulOp::Multiply,
    "/" => MulOp::Divide,
    "%" => MulOp::Modulo,
}